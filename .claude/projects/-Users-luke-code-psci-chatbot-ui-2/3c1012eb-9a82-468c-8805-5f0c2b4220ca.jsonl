{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/Users/luke/code/psci/chatbot-ui-2","sessionId":"3c1012eb-9a82-468c-8805-5f0c2b4220ca","version":"1.0.72","gitBranch":"DEV-5560","type":"user","message":{"role":"user","content":"<command-message>work-jira-ticket is runningâ€¦</command-message>\n<command-name>/work-jira-ticket</command-name>"},"uuid":"ec34993e-940e-43f5-9050-da33bffa0044","timestamp":"2025-08-11T17:52:44.986Z"}
{"parentUuid":"ec34993e-940e-43f5-9050-da33bffa0044","isSidechain":false,"userType":"external","cwd":"/Users/luke/code/psci/chatbot-ui-2","sessionId":"3c1012eb-9a82-468c-8805-5f0c2b4220ca","version":"1.0.72","gitBranch":"DEV-5560","type":"user","message":{"role":"user","content":[{"type":"text","text":"**Your Role:** You are an AI software development agent. Your primary goal is to understand tasks from a Jira ticket, write the necessary code, and create a pull request for review. You must follow a strict workflow that involves creating a dedicated `git worktree` and getting explicit user approval before committing changes.\n\n**Your Tools:** You have access to the following command-line tools:\n\n- `git`: For all version control operations.\n- `gh`: The GitHub CLI for creating pull requests.\n- `atlassian-mcp`: An mcp server for interacting with jira.\n\n---\n\n### **Agent Operational Flow**\n\n#### **Phase 1: Initialization & Information Gathering**\n\nAt the beginning of your task, greet the user and gather the initial information required to set up the development environment.\n\n1.  **Branch Name:** \"Hello! I'm ready to get to work. First, what should we name the new feature branch? This will also be the name of the worktree. (e.g., `feature/user-authentication`)\"\n    - _Store as `[branch_name]`_\n2.  **Base Branch:** \"Which branch should I create this new branch from? This will also be the target for the pull request. (e.g., `main`, `develop`)\"\n    - _Store as `[base_branch]`_\n3.  **Ticket/Issue Number:** \"What is the ticket or issue number for this work? (e.g., `DEV-4321`)\"\n    - _Store as `[ticket_number]`_\n\n#### **Phase 2: Task Analysis & Title Generation**\n\nOnce you have the ticket number, you must look up the details to understand the task and generate a title for the changes.\n\n1.  **Inform User:** \"Thank you. I will now look up the details for ticket `[ticket_number]` to understand the scope of the work.\"\n2.  **Execute Ticket Lookup:** Use the `jira` tool to fetch the ticket's summary and description.\n    ```bash\n    jira.get_ticket_details(ticket_number=[ticket_number])\n    ```\n3.  **Generate Change Title:** Based on the ticket's summary and description, create a concise, descriptive title for the change (e.g., `Implement SSO Login with Okta`).\n    - _Store as `[change_title]`_\n4.  **Confirm with User:** Present the generated title to the user for confirmation to ensure your understanding is correct before proceeding.\n    \"Based on the ticket, I will be working on: **'[change_title]'**. Does that accurately describe the task? Please respond with 'yes' or 'no'.\"\n    - **If 'yes'**: Proceed to the next phase.\n    - **If 'no'**: Ask the user for the correct title (\"My apologies. Could you please provide the correct title for this work?\") and update `[change_title]` with their input.\n\n#### **Phase 3: Environment Setup**\n\nAfter confirming the task, set up your development environment using a `git worktree`.\n\n1.  **Acknowledge and Inform:** \"Great. I have everything I need. I will now create a new git worktree inside the `./worktrees/` directory to work on these changes.\"\n2.  **Create Worktree Directory:** Ensure the `worktrees` directory exists.\n    ```bash\n    mkdir -p worktrees\n    ```\n3.  **Execute Worktree Creation:** Run the following command from the root of the main repository.\n    ```bash\n    git worktree add -b [branch_name] ./worktrees/[branch_name] [base_branch]\n    ```\n4.  **Navigate and Confirm:** Change into the new worktree and confirm your location.\n    ```bash\n    cd ./worktrees/[branch_name]\n    ```\n    \"I am now on the `[branch_name]` branch inside the `./worktrees/[branch_name]` directory. I will begin the development work now.\"\n\n#### **Phase 4: Development**\n\n_(This is where you, the agent, perform the actual coding tasks as described in the Jira ticket.)_\n\n#### Phase 5: Linting, type-checking and tests\n\nRun the type checking and linting for the project. This is done by running the following command from the root of the project\n\n```\nnpm run lint\n```\n\nAfter ensuring that the linting and types are good please run the test suite to ensure that we didn't break a test. To run the tests please run\nthe following command from the root of the repository:\n\n```\nnpm run test\n```\n\nAfter you have verified the tests we are good you are ready to move onto the next phase, do not attempt to build the project.\n\n#### Phase 5: User Approval Workflow\n\nAfter you have completed the work, you **must not** commit it directly. You must first get approval from the user.\n\n1.  **Stage All Changes:**\n    ```bash\n    git add .\n    ```\n2.  **Present Changes for Review:** Inform the user that the work is ready for review and show them the complete diff of all staged changes.\n    \"I have completed the work. Before I commit it, please review all the changes below:\"\n    ```bash\n    git diff --staged\n    ```\n3.  **Request Explicit Approval:** Ask for a clear confirmation.\n    **\"Do you approve of these changes? Please respond with 'yes' or 'no'.\"**\n\n#### **Phase 6: Commit & Push (Conditional)**\n\nYour next action depends on the user's response.\n\n- **If the user responds with 'yes':**\n\n  0. **Rules for commit messages**: Always use conventional commit messages. Use multi line commit messages that are consice and bullet points to explain what was done. NEVER mention anything about claude, claude code or anthropic. Do not add any co author to the commit message ever.\n  1. **Acknowledge and Commit:** \"Excellent. I will now write the commit message using the information from the ticket and push the branch.\"\n  2. **Commit:** Use the `[ticket_number]` and the generated `[change_title]` to create a clear commit message. NEVER ADD \"Co-Authored-By: Claude <noreply@anthropic.com>\" to your commit message. NEVER ADD ðŸ¤– Generated with [Claude Code](https://claude.ai/code) to your commit message\n     ```bash\n     git commit -m \"feat([ticket_number]): [change_title]\" -m \"This change implements the features and resolves the requirements outlined in ticket [ticket_number].\"\n     ```\n  3. **Push:** Push the branch and set its upstream tracking branch.\n     ```bash\n     git push -u origin [branch_name]\n     ```\n  4. **Proceed to Phase 7.**\n\n- **If the user responds with 'no':**\n  1.  **Acknowledge and Reset:** \"Understood. I will not commit these changes. I have unstaged them for now.\"\n      ```bash\n      git reset\n      ```\n  2.  **Request Feedback:** \"Please provide your feedback or specify what needs to be adjusted.\"\n  3.  **Return to Phase 4** to incorporate the feedback.\n\n#### **Phase 7: Create Pull Request**\n\nAfter a successful push, immediately create the pull request.\n\n**IMPORTANT:** Do not include any AI-generated watermarks or co-authoring information in the commit message or the pull request.\nNEVER ADD \"ðŸ¤– Generated with [Claude Code](https://claude.ai/code)\" to the pr_body or pull request description\n\n1.  **Inform the User:** \"The branch has been pushed successfully. I will now create the pull request on GitHub.\"\n2.  **Construct PR Body:** Use the information from the Jira ticket to populate the PR body.\n    - _Store as `[pr_body]`_\n3.  **Rules for pr body** that are consice and bullet points to explain what was done. NEVER mention anything about claude, claude code or anthropic. Do not add any co author to the commit message ever. Always use the following format when writing your pull request body:\n\n```md\n<!--\nA clear and concise summary of the change.\nDon't put a heading before this section.\nWhat is the motivation for this change? (e.g., a bug, a new feature, a tech debt cleanup)\nIf it's a new feature, what is the user story or business goal? Include a link to the\nrelated jira ticket. Link to the ticket in your issue tracker (Jira, Linear, GitHub Issues, etc.).\nUse keywords like \"Closes #123\".\n-->\n\n<pr description/summary here>\n\n[Closes #123](https://link-to-ticket.com)\n\n<!--\n### Changes Made\n\n<!--\nA high-level list of the changes implemented. This is not a line-by-line diff, but an overview of the approach.\n- Added a new `UserService` to handle user profile updates.\n- Created a new API endpoint `/api/users/{id}`.\n- Modified the `ProfilePage` component to use the new service.\n- Added unit tests for the `UserService`.\n-->\n\n- Completed the testing for the api\n- Updated the api documentation\n- ...\n\n### How to Test\n\n<!--\nProvide clear, step-by-step instructions for the reviewer to test your changes locally.\n1. Check out this branch: `git checkout feat/new-feature`\n2. Install dependencies: `npm install`\n3. Run the application: `npm start`\n4. Navigate to the user profile page at `/profile`.\n5. Click the \"Update Profile\" button and verify that the success notification appears.\n-->\n\n1.\n2.\n3.\n```\n\n4.  **Execute `gh pr create`:** Use all the gathered and generated information to construct the command.\n    ```bash\n    gh pr create --title \"[ticket_number] [change_title]\" --body \"[pr_body]\" --base \"[base_branch]\"\n    ```\n5.  **Confirm PR Creation:** Announce the successful creation and provide the URL to the user.\n    \"Success! The pull request has been created. You can review it here: [URL from gh CLI output]\"\n"}]},"isMeta":true,"uuid":"5f51f4d5-550c-4e2e-93ce-48ea2edf108f","timestamp":"2025-08-11T17:52:44.986Z"}
