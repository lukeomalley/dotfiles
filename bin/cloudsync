#!/bin/bash

# Cloud Sync Script - GNU Parallel version
# Requires: brew install parallel
# Usage: cloud-sync [--progress]

set -euo pipefail

# Parse command line arguments
SHOW_PROGRESS=false
INIT_MODE=false
PROFILE="${CLOUDSYNC_PROFILE:-}"
for arg in "$@"; do
    case $arg in
        --progress)
            SHOW_PROGRESS=true
            shift
            ;;
        --init)
            INIT_MODE=true
            shift
            ;;
        --profile=*)
            PROFILE="${arg#--profile=}"
            shift
            ;;
        --help|-h)
            echo "Usage: cloud-sync [--progress] [--init] [--profile=NAME]"
            echo "  --progress  Show sync progress (default: hidden)"
            echo "  --init      Initialize sync directories with --resync (DESTRUCTIVE)"
            echo "  --profile   Use a subset of directories (e.g., --profile=work)."
            echo "             Or set CLOUDSYNC_PROFILE=work"
            echo "  --help      Show this help message"
            echo ""
            echo "WARNING: --init uses --resync which can overwrite data!"
            echo "Only use --init for first-time setup on a new computer."
            exit 0
            ;;
        *)
            echo "Unknown option: $arg"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Configuration  
SYNC_DIRS=(
    "/Users/luke/Documents/books:b2:books"
    "/Users/luke/Documents/wallpapers:b2:wallpapers"
    "/Users/luke/Documents/claudia:b2:claudia"
    "/Users/luke/Documents/jobs:b2:jobs"
    "/Users/luke/Documents/taxes:b2:taxes"
    "/Users/luke/Documents/images:b2:images"
    "/Users/luke/Documents/papers:b2:papers"
)

SYNC_DIRS_WORK=(
    "/Users/luke/Documents/books:b2:books"
    "/Users/luke/Documents/wallpapers:b2:wallpapers"
    "/Users/luke/Documents/taxes:b2:taxes"
    "/Users/luke/Documents/images:b2:images"
    "/Users/luke/Documents/papers:b2:papers"
)

ACTIVE_SYNC_DIRS=()

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ✓${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ✗${NC} $1" >&2
}

log_warning() {
    echo -e "\033[1;33m[$(date +'%Y-%m-%d %H:%M:%S')] ⚠${NC} $1"
}

select_active_dirs() {
    case "${PROFILE:-default}" in
        work)
            ACTIVE_SYNC_DIRS=("${SYNC_DIRS_WORK[@]}")
            ;;
        default|*)
            ACTIVE_SYNC_DIRS=("${SYNC_DIRS[@]}")
            ;;
    esac
}

# Function to initialize a single directory pair
init_job() {
    local sync_pair="$1"
    local local_dir="${sync_pair%%:*}"
    local remote_path="${sync_pair#*:}"
    
    log "Initializing: $local_dir → $remote_path"
    
    # Create local directory if it doesn't exist
    if [[ ! -d "$local_dir" ]]; then
        log_warning "Creating local directory: $local_dir"
        if ! mkdir -p "$local_dir"; then
            log_error "Failed to create directory: $local_dir"
            return 1
        fi
    fi
    
    # Build rclone command with --resync and optional progress
    local cmd_args=("$local_dir" "$remote_path" "--resync")
    if [[ "$SHOW_PROGRESS" == "true" ]]; then
        cmd_args+=("--progress")
    fi
    
    if rc bisync "${cmd_args[@]}"; then
        log_success "Initialized: $local_dir → $remote_path"
        return 0
    else
        log_error "Failed to initialize: $local_dir → $remote_path"
        return 1
    fi
}

# Function to sync a single directory pair
sync_job() {
    local sync_pair="$1"
    local local_dir="${sync_pair%%:*}"
    local remote_path="${sync_pair#*:}"
    
    if [[ ! -d "$local_dir" ]]; then
        log_error "Directory not found: $local_dir"
        log_error "Run 'cloudsync --init' first to initialize sync directories"
        return 1
    fi
    
    log "Syncing: $local_dir → $remote_path"
    
    # Build rclone command with optional progress flag
    local cmd_args=("$local_dir" "$remote_path")
    if [[ "$SHOW_PROGRESS" == "true" ]]; then
        cmd_args+=("--progress")
    fi
    
    if rc bisync "${cmd_args[@]}"; then
        log_success "Completed: $local_dir → $remote_path"
        return 0
    else
        log_error "Failed: $local_dir → $remote_path"
        return 1
    fi
}

# Export the functions and variables so parallel can use them
export -f sync_job init_job log log_success log_error log_warning
export RED GREEN BLUE NC SHOW_PROGRESS

confirm_init() {
    echo
    log_warning "DESTRUCTIVE OPERATION WARNING!"
    echo "This will initialize sync directories using 'bisync --resync'"
    echo "The --resync flag can OVERWRITE data on either side!"
    echo
    echo "Directories to initialize:"
    for sync_pair in "${ACTIVE_SYNC_DIRS[@]}"; do
        local local_dir="${sync_pair%%:*}"
        local remote_path="${sync_pair#*:}"
        echo "  • $local_dir → $remote_path"
    done
    echo
    read -p "Are you sure you want to proceed? (type 'yes' to confirm): " confirmation
    
    if [[ "$confirmation" != "yes" ]]; then
        log_error "Init cancelled by user"
        exit 1
    fi
}

main() {
    # Check if parallel is installed
    if ! command -v parallel >/dev/null 2>&1; then
        log_error "GNU Parallel not found. Install with: brew install parallel"
        exit 1
    fi
    
    # Resolve active directory set before any actions
    select_active_dirs

    if [[ "$INIT_MODE" == "true" ]]; then
        log "Starting sync directory initialization..."
        confirm_init
        
        log "Initializing sync directories with --resync..."
        
        # Use GNU parallel to run init jobs
        printf '%s\n' "${ACTIVE_SYNC_DIRS[@]}" | \
            parallel -j0 --halt soon,fail=1 --line-buffer init_job
        
        if [[ $? -eq 0 ]]; then
            log_success "All directories initialized successfully!"
            echo
            log "Next steps:"
            echo "1. Run 'cloudsync' for regular syncing"
            echo "2. Use 'cloudsync --progress' to see sync progress"
        else
            log_error "One or more initializations failed"
            exit 1
        fi
    else
        log "Starting cloud sync with GNU Parallel..."
        
        # Use GNU parallel to run sync jobs
        printf '%s\n' "${ACTIVE_SYNC_DIRS[@]}" | \
            parallel -j0 --halt soon,fail=1 --line-buffer sync_job
        
        if [[ $? -eq 0 ]]; then
            log_success "All syncs completed successfully!"
        else
            log_error "One or more syncs failed"
            exit 1
        fi
    fi
}

main "$@"
